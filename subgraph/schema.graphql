# ================================= Ethereum ==================================
type Account @entity {
	id:                           ID!
	wallets:                      [ShardedWallet!]! @derivedFrom(field: "owner")
	walletsAsArtist:              [ShardedWallet!]! @derivedFrom(field: "artist")
	balances:                     [Balance!]! @derivedFrom(field: "account")
	transfersFrom:                [Transfer!]! @derivedFrom(field: "from")
	transfersTo:                  [Transfer!]! @derivedFrom(field: "to")
	approvalsOwner:               [Approval!]! @derivedFrom(field: "owner")
	approvalsSpender:             [Approval!]! @derivedFrom(field: "spender")
	executions:                   [Execute!]! @derivedFrom(field: "to")
	calls:                        [ActionCall!]! @derivedFrom(field: "to")
	recipient:                    [FixedPriceSale!]! @derivedFrom(field: "recipient")
	prebuys:                      [FixedPriceSalePrebuy!]! @derivedFrom(field: "recipient")
	buys:                         [FixedPriceSaleBuy!]! @derivedFrom(field: "recipient")
}

type Module @entity {
	id:                           ID!
	executions:                   [ModuleExecute!]! @derivedFrom(field: "module")
}

# =============================== ShardedWallet ===============================
type Governance @entity {
	id:                           ID!
	wallets:                      [ShardedWallet!]! @derivedFrom(field: "governance")
}

type ShardedWallet @entity {
	id:                           ID!
	owner:                        Account!
	governance:                   Governance!
	artist:                       Account!
	# ERC20
	name:                         String!
	symbol:                       String!
	decimals:                     Int!
	totalSupply:                  DecimalValue!
	balances:                     [Balance!]! @derivedFrom(field: "wallet")
	# Executions
	executions:                   [Execute!]! @derivedFrom(field: "wallet")
	moduleExecutions:             [ModuleExecute!]! @derivedFrom(field: "wallet")
	# Administration
	GovernanceUpdates:            [GovernanceUpdated!]! @derivedFrom(field: "wallet")
	# Modules
	actions:                      [Action!]! @derivedFrom(field: "wallet")
	actionScheduled:              [ActionScheduled!]! @derivedFrom(field: "wallet")
	actionExecuted:               [ActionExecuted!]! @derivedFrom(field: "wallet")
	actionCancelled:              [ActionCancelled!]! @derivedFrom(field: "wallet")
	activeBuyout:                 Buyout
	buyouts:                      [Buyout!]! @derivedFrom(field: "wallet")
	# crowdsale
	crowdsales:                   [FixedPriceSale!]! @derivedFrom(field: "wallet")
}

type Balance @entity {
	id:                           ID!
	wallet:                       ShardedWallet!
	account:                      Account!
	amount:                       DecimalValue!
	transfersFrom:                [Transfer!]! @derivedFrom(field: "fromBalance")
	transfersTo:                  [Transfer!]! @derivedFrom(field: "toBalance")
}

# ================================== Timers ===================================
enum TimerStatus {
	STARTED,
	STOPPED,
	RESET,
}

type Timer @entity {
	id:                           ID!
	emitter:                      Bytes!
	identifier:                   Bytes!
	status:                       TimerStatus!
	start:                        BigInt!
	deadline:                     BigInt!
	startEvents:                  [TimerStarted!]! @derivedFrom(field: "timer")
	stopEvents:                   [TimerStopped!]! @derivedFrom(field: "timer")
	resetEvents:                  [TimerReset!]! @derivedFrom(field: "timer")
}

# ================================== Actions ==================================
enum ActionStatus {
	SCHEDULED,
	EXECUTED,
	CANCELLED,
}

type Action @entity {
	id:                           ID!
	status:                       ActionStatus!
	wallet:                       ShardedWallet!
	identifier:                   String!
	timer:                        Timer!
	calls:                        [ActionCall!]! @derivedFrom(field: "action")
	scheduledEvents:              [ActionScheduled!]! @derivedFrom(field: "action")
	executedEvents:               [ActionExecuted!]! @derivedFrom(field: "action")
	cancelledEvents:              [ActionCancelled!]! @derivedFrom(field: "action")
}

type ActionCall @entity {
	id:                           ID!
	action:                       Action!
	index:                        BigInt!
	to:                           Account!
	value:                        DecimalValue!
	data:                         Bytes!
}

# ================================== Buyout ===================================
enum BuyoutStatus {
	RUNNING,
	CANCELLED,
	SUCCESSFULL,
	RESETTED,
}

type Buyout @entity {
	id:                           ID!
	status:                       BuyoutStatus!
	wallet:                       ShardedWallet!
	proposer:                     Account!
	pricePerShard:                DecimalValue!
	timer:                        Timer!
	start:                        BigInt!
	deadline:                     BigInt!
	openEvents:                   [BuyoutOpened!]! @derivedFrom(field: "buyout")
	closeEvents:                  [BuyoutClosed!]! @derivedFrom(field: "buyout")
	claimEvents:                  [BuyoutClaimed!]! @derivedFrom(field: "buyout")
	finalizeEvents:               [BuyoutFinalized!]! @derivedFrom(field: "buyout")
	resetEvents:                  [BuyoutResetted!]! @derivedFrom(field: "buyout")
}

# ============================== FixedPriceSale ===============================
enum FixedPriceSaleStatus {
	INITIATED,
	SUCCESS,
	FAILURE,
	RESET,
}

type FixedPriceSale @entity {
	id:                           ID!
	index:                        Int!
	wallet:                       ShardedWallet!
	recipient:                    Account!
	balance:                      DecimalValue!
	price:                        DecimalValue!
	offeredShards:                DecimalValue!
	remainingShards:              DecimalValue!
	timer:                        Timer!
	start:                        BigInt!
	deadline:                     BigInt!
	status:                       FixedPriceSaleStatus!
	withdrawn:                    Boolean!
	prebuys:                      [FixedPriceSalePrebuy!]! @derivedFrom(field: "fixedpricesale")
	buys:                         [FixedPriceSaleBuy!]! @derivedFrom(field: "fixedpricesale")
}

type FixedPriceSalePrebuy @entity {
	id:                           ID!
	index:                        Int!
	fixedpricesale:               FixedPriceSale!
	recipient:                    Account!
	amount:                       DecimalValue!
	redeemed:                     Boolean!
	events:                       [ShardsPrebuy!]! @derivedFrom(field: "fixedpricesaleprebuy")
}

type FixedPriceSaleBuy @entity {
	id:                           ID!
	index:                        Int!
	fixedpricesale:               FixedPriceSale!
	recipient:                    Account!
	amount:                       DecimalValue!
	redeemed:                     Boolean!
	events:                       [ShardsBought!]! @derivedFrom(field: "fixedpricesalebuy")
}

# ================================== Events ===================================
type OwnershipTransferred implements Event @entity {
	id:                           ID!
	transaction:                  Transaction!
	timestamp:                    BigInt!
	wallet:                       ShardedWallet!
	from:                         Account!
	to:                           Account!
}

type Approval implements Event @entity {
	id:                           ID!
	transaction:                  Transaction!
	timestamp:                    BigInt!
	wallet:                       ShardedWallet!
	owner:                        Account!
	spender:                      Account!
	amount:                       DecimalValue!
}

type Transfer implements Event @entity {
	id:                           ID!
	transaction:                  Transaction!
	timestamp:                    BigInt!
	wallet:                       ShardedWallet!
	from:                         Account!
	fromBalance:                  Balance # can be null (in case of mint)
	to:                           Account!
	toBalance:                    Balance # can be null (in case of burn)
	amount:                       DecimalValue!
}

type Execute implements Event @entity {
	id:                           ID!
	transaction:                  Transaction!
	timestamp:                    BigInt!
	wallet:                       ShardedWallet!
	to:                           Account!
	value:                        DecimalValue!
	data:                         Bytes!
}

type ModuleExecute implements Event @entity {
	id:                           ID!
	transaction:                  Transaction!
	timestamp:                    BigInt!
	wallet:                       ShardedWallet!
	module:                       Module!
	to:                           Account!
	value:                        DecimalValue!
	data:                         Bytes!
}

type GovernanceUpdated implements Event @entity {
	id:                           ID!
	transaction:                  Transaction!
	timestamp:                    BigInt!
	wallet:                       ShardedWallet!
	governance:                   Governance!
}

type ArtistUpdated implements Event @entity {
	id:                           ID!
	transaction:                  Transaction!
	timestamp:                    BigInt!
	wallet:                       ShardedWallet!
	artist:                       Account!
}

type TimerStarted implements Event @entity {
	id:                           ID!
	transaction:                  Transaction!
	timestamp:                    BigInt!
	timer:                        Timer!
}

type TimerStopped implements Event @entity {
	id:                           ID!
	transaction:                  Transaction!
	timestamp:                    BigInt!
	timer:                        Timer!
}

type TimerReset implements Event @entity {
	id:                           ID!
	transaction:                  Transaction!
	timestamp:                    BigInt!
	timer:                        Timer!
}

type ActionScheduled implements Event @entity {
	id:                           ID!
	transaction:                  Transaction!
	timestamp:                    BigInt!
	action:                       Action!
	wallet:                       ShardedWallet!
}

type ActionExecuted implements Event @entity {
	id:                           ID!
	transaction:                  Transaction!
	timestamp:                    BigInt!
	action:                       Action!
	wallet:                       ShardedWallet!
}

type ActionCancelled implements Event @entity {
	id:                           ID!
	transaction:                  Transaction!
	timestamp:                    BigInt!
	action:                       Action!
	wallet:                       ShardedWallet!
}

type BuyoutOpened implements Event @entity {
	id:                           ID!
	transaction:                  Transaction!
	timestamp:                    BigInt!
	buyout:                       Buyout!
	proposer:                     Account!
}

type BuyoutClosed implements Event @entity {
	id:                           ID!
	transaction:                  Transaction!
	timestamp:                    BigInt!
	buyout:                       Buyout!
	closer:                       Account!
}

type BuyoutClaimed implements Event @entity {
	id:                           ID!
	transaction:                  Transaction!
	timestamp:                    BigInt!
	buyout:                       Buyout!
	user:                         Account!
}

type BuyoutFinalized implements Event @entity {
	id:                           ID!
	transaction:                  Transaction!
	timestamp:                    BigInt!
	buyout:                       Buyout!
}

type BuyoutResetted implements Event @entity {
	id:                           ID!
	transaction:                  Transaction!
	timestamp:                    BigInt!
	buyout:                       Buyout!
}

type ShardsPrebuy implements Event @entity {
	id:                           ID!
	transaction:                  Transaction!
	timestamp:                    BigInt!
	fixedpricesaleprebuy:         FixedPriceSalePrebuy!
	index:                        Int!
	value:                        DecimalValue!
}

type ShardsBought implements Event @entity {
	id:                           ID!
	transaction:                  Transaction!
	timestamp:                    BigInt!
	fixedpricesalebuy:            FixedPriceSaleBuy!
	index:                        Int!
	value:                        DecimalValue!
}

type DecimalValue @entity {
	id:                           ID!
	value:                        BigDecimal!
	exact:                        BigInt!
	decimals:                     Int!
}

interface Event {
	id:                           ID!
	transaction:                  Transaction!
	timestamp:                    BigInt!
}

type Transaction @entity {
	id:                           ID!
	timestamp:                    BigInt!
	blockNumber:                  BigInt!
	events:                       [Event!]! @derivedFrom(field: "transaction")
}

type PersistentStringArray @entity {
	id:                           ID!
	values:                       [String!]!
}

type PersistentString @entity {
	id:                           ID!
	value:                        String!
}
