type Governance @entity {
	id:                           ID!
	shardedwallets:               [ShardedWallet!]! @derivedFrom(field: "governance")
}

type Account @entity {
	id:                           ID!
	balances:                     [Balance!]! @derivedFrom(field: "account")
	# transfersOperator:            [Transfer!]! @derivedFrom(field: "operator")
	# transfersFrom:                [Transfer!]! @derivedFrom(field: "from")
	# transfersTo:                  [Transfer!]! @derivedFrom(field: "to")
	# approvalsOwner:               [Approval!]! @derivedFrom(field: "owner")
	# approvalsSpender:             [Approval!]! @derivedFrom(field: "spender")
}

type ShardedWallet @entity {
	id:                           ID!
	governance:                   Governance!
	name:                         String!
	symbol:                       String!
	decimals:                     Int!
	totalSupply:                  DecimalValue!
	# balances
}

type Balance @entity {
	id:                           ID!
	token:                        ShardedWallet!
	account:                      Account!
	amount:                       DecimalValue!
	# transfersFrom:                [Transfer!]! @derivedFrom(field: "fromBalance")
	# transfersTo:                  [Transfer!]! @derivedFrom(field: "toBalance")
}

type DecimalValue @entity {
	id:                           ID!
	value:                        BigDecimal!
	exact:                        BigInt!
	decimals:                     Int!
}

interface Event {
	id:                           ID!
	transaction:                  Transaction!
	timestamp:                    BigInt!
}

type Transaction @entity {
	id:                           ID!
	timestamp:                    BigInt!
	blockNumber:                  BigInt!
	events:                       [Event!]! @derivedFrom(field: "transaction")
}

type PersistentStringArray @entity {
	id:                           ID!
	values:                       [String!]!
}

type PersistentString @entity {
	id:                           ID!
	value:                        String!
}
